"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.asyncStream = exports.streamAsyncIterable = exports.asyncStreamIterable = void 0;
class AsyncStreamOfIterator {
    constructor(iterator) {
        this.iterator = iterator;
    }
    [Symbol.asyncIterator]() {
        return this.iterator;
    }
    filter(predicate) {
        async function* filtered(it) {
            for await (const v of it) {
                if (predicate(v)) {
                    yield v;
                }
            }
        }
        return new AsyncStreamOfIterator(filtered(this));
    }
    map(transform) {
        async function* mapped(it) {
            for await (const v of it) {
                yield transform(v);
            }
        }
        return new AsyncStreamOfIterator(mapped(this));
    }
    mapAwait(transform) {
        async function* mapAwaited(it) {
            for await (const v of it) {
                yield await transform(v);
            }
        }
        return new AsyncStreamOfIterator(mapAwaited(this));
    }
    flatMap(transform) {
        async function* flatMapped(it) {
            for await (const nested of it) {
                yield* transform(nested);
            }
        }
        return new AsyncStreamOfIterator(flatMapped(this));
    }
    flatMapAwait(transform) {
        async function* flatMapAwaited(it) {
            for await (const nested of it) {
                yield* await transform(nested);
            }
        }
        return new AsyncStreamOfIterator(flatMapAwaited(this));
    }
    batch(batchSize) {
        if (batchSize < 1) {
            throw new Error("batchSize should be positive");
        }
        async function* batched(it) {
            let acc = [];
            for await (const v of it) {
                acc.push(v);
                if (acc.length === batchSize) {
                    yield acc;
                    acc = [];
                }
            }
            if (acc.length > 0) {
                yield acc;
            }
        }
        return new AsyncStreamOfIterator(batched(this));
    }
    limit(maxSize) {
        async function* limited(it) {
            let count = 0;
            if (count >= maxSize) {
                return;
            }
            for await (const v of it) {
                yield v;
                count += 1;
                if (count >= maxSize) {
                    return;
                }
            }
        }
        return new AsyncStreamOfIterator(limited(this));
    }
    skip(n) {
        async function* skipped(it) {
            let count = 0;
            for await (const v of it) {
                if (count >= n) {
                    yield v;
                }
                count += 1;
            }
        }
        return new AsyncStreamOfIterator(skipped(this));
    }
    dropWhile(predicate) {
        async function* droppedWhile(it) {
            let dropping = true;
            for await (const v of it) {
                dropping = dropping && predicate(v);
                if (!dropping) {
                    yield v;
                }
            }
        }
        return new AsyncStreamOfIterator(droppedWhile(this));
    }
    takeWhile(predicate) {
        async function* takenWhile(it) {
            for await (const v of it) {
                if (!predicate(v)) {
                    return;
                }
                yield v;
            }
        }
        return new AsyncStreamOfIterator(takenWhile(this));
    }
    peek(observer) {
        async function* peeked(it) {
            for await (const v of it) {
                observer(v);
                yield v;
            }
        }
        return new AsyncStreamOfIterator(peeked(this));
    }
    async forEach(block) {
        for await (const v of this) {
            await block(v);
        }
    }
    async collect(container, accumulator, finisher) {
        for await (const v of this) {
            accumulator(container, v);
        }
        return finisher(container);
    }
    async reduceLeft(initial, reducer) {
        let result = initial;
        for await (const v of this) {
            result = reducer(result, v);
        }
        return result;
    }
    async all(predicate) {
        for await (const v of this) {
            if (!(await predicate(v))) {
                return false;
            }
        }
        return true;
    }
    async any(predicate) {
        for await (const v of this) {
            if (await predicate(v)) {
                return true;
            }
        }
        return false;
    }
    async none(predicate) {
        for await (const v of this) {
            if (await predicate(v)) {
                return false;
            }
        }
        return true;
    }
    async count() {
        let count = 0;
        for await (const v of this) {
            count += 1;
        }
        return count;
    }
    async first(predicate) {
        for await (const v of this) {
            if (await predicate(v)) {
                return v;
            }
        }
        return null;
    }
    async last(predicate) {
        let result = null;
        for await (const v of this) {
            if (await predicate(v)) {
                result = v;
            }
        }
        return result;
    }
    async max(comparator) {
        let result = null;
        for await (const v of this) {
            if (result === null) {
                result = v;
            }
            else {
                result = comparator(result, v) > 0 ? result : v;
            }
        }
        return result;
    }
    async min(comparator) {
        let result = null;
        for await (const v of this) {
            if (result === null) {
                result = v;
            }
            else {
                result = comparator(result, v) < 0 ? result : v;
            }
        }
        return result;
    }
    async reduce(adder) {
        let result = null;
        for await (const v of this) {
            if (result === null) {
                result = v;
            }
            else {
                result = adder(result, v);
            }
        }
        return result;
    }
    async toArray() {
        const result = [];
        for await (const v of this) {
            result.push(v);
        }
        return result;
    }
}
// Stream Sources
function asyncStreamIterable(itrbl) {
    async function* iterableSource() {
        for (const e of itrbl) {
            yield e;
        }
    }
    return new AsyncStreamOfIterator(iterableSource());
}
exports.asyncStreamIterable = asyncStreamIterable;
function streamAsyncIterable(itrbl) {
    return new AsyncStreamOfIterator(itrbl[Symbol.asyncIterator]());
}
exports.streamAsyncIterable = streamAsyncIterable;
function asyncStream(it) {
    if (typeof it[Symbol.iterator] === "function") {
        return asyncStreamIterable(it);
    }
    if (typeof it[Symbol.asyncIterator] === "function") {
        return streamAsyncIterable(it);
    }
    return new AsyncStreamOfIterator(it);
}
exports.asyncStream = asyncStream;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBa0NBLE1BQU0scUJBQXFCO0lBQ3pCLFlBQTZCLFFBQStCO1FBQS9CLGFBQVEsR0FBUixRQUFRLENBQXVCO0lBQUcsQ0FBQztJQUVoRSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFDcEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxNQUFNLENBQUMsU0FBNEI7UUFDakMsS0FBSyxTQUFTLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBa0I7WUFDekMsSUFBSSxLQUFLLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFO2dCQUN4QixJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtvQkFDaEIsTUFBTSxDQUFDLENBQUM7aUJBQ1Q7YUFDRjtRQUNILENBQUM7UUFDRCxPQUFPLElBQUkscUJBQXFCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVELEdBQUcsQ0FBSSxTQUFzQjtRQUMzQixLQUFLLFNBQVMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFrQjtZQUN2QyxJQUFJLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUU7Z0JBQ3hCLE1BQU0sU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3BCO1FBQ0gsQ0FBQztRQUNELE9BQU8sSUFBSSxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsUUFBUSxDQUFJLFNBQStCO1FBQ3pDLEtBQUssU0FBUyxDQUFDLENBQUMsVUFBVSxDQUFDLEVBQWtCO1lBQzNDLElBQUksS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRTtnQkFDeEIsTUFBTSxNQUFNLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUMxQjtRQUNILENBQUM7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